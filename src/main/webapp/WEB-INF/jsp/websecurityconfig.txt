package com.code.config;



import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.code.model.User;
import com.code.service.UserService;

@Configuration
@EnableWebSecurity
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	 @Autowired
	 DataSource dataSource;

	
	UserService userService;
    @Autowired
    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
    	
    	auth.jdbcAuthentication().dataSource(dataSource)
    	.usersByUsernameQuery("select username,password, enabled from userss where username=?")
    	.authoritiesByUsernameQuery(
    	"select username, role from user_roles where username=?");
    			 
    	
        auth.inMemoryAuthentication().withUser("admin").password("admin").roles("ADMIN");
        auth.inMemoryAuthentication().withUser("user").password("user").roles("USER");
    }
    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
           // .antMatchers("/admin/**").access("hasRole('ROLE_ADMIN')")
          //  .antMatchers("/user/**").access("hasRole('ROLE_ADMIN') or hasRole('ROLE_USER')")
           
            .antMatchers("/hello").access("hasRole('ROLE_ADMIN')")  
            .anyRequest().permitAll()
          //  .antMatchers("/").permitAll()
          //  .antMatchers("/").permitAll()
        .and()
            .formLogin().loginPage("/login")
            .usernameParameter("username").passwordParameter("password")
        .and()
            .logout().logoutSuccessUrl("/login?logout")
        .and()
            .exceptionHandling().accessDeniedPage("/403")
         .and()
             .csrf();
    }
}